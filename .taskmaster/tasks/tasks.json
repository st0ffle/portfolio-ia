{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "Configuration et setup projet Next.js 15 avec stack optimisé 2025",
        "description": "Initialiser le projet avec React 19, Next.js 15 App Router, TypeScript 5.7, TailwindCSS v4 et pnpm",
        "details": "Créer un nouveau projet Next.js 15 avec Turbopack activé. Installer React 19, TypeScript 5.7 en mode strict, TailwindCSS v4 (CSS-first). Configurer pnpm comme package manager. Initialiser Git et setup de base ESLint/Prettier. Créer structure dossiers : /components, /lib, /types, /styles. Configuration next.config.js avec optimisations bundle pour target <200KB.",
        "testStrategy": "Vérifier que le projet démarre correctement avec npm run dev, que TypeScript compile sans erreurs, et que TailwindCSS v4 fonctionne avec classes de base",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Installation et configuration Shadcn/ui avec React Spring",
        "description": "Mettre en place le design system avec Shadcn/ui et React Spring pour les animations",
        "details": "Installer et configurer Shadcn/ui avec TailwindCSS v4. Installer React Spring (remplaçant Framer Motion pour 30% de gain de performance). Créer components.json pour Shadcn. Installer composants de base : Button, Card, Input, Textarea. Créer un thème personnalisé avec couleurs modernes et typography system. Setup des tokens design dans tailwind.config.js.",
        "testStrategy": "Créer une page de test avec tous les composants Shadcn installés et une animation React Spring simple pour valider l'intégration",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Développement du layout et navigation responsive",
        "description": "Créer la structure de navigation principale et le layout responsive mobile-first",
        "details": "Développer Header avec navigation sticky et menu mobile hamburger responsive. Créer Footer avec liens essentiels. Implémenter navigation smooth scroll entre sections avec React Spring. Layout mobile-first avec breakpoints optimisés. Menu collapsible sur mobile avec animations fluides. Navigation avec indicateur de section active.",
        "testStrategy": "Tester la navigation sur différentes tailles d'écran (mobile 375px, tablette 768px, desktop 1024px+) et vérifier le smooth scroll",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Création de la hero section statique avec structure Dev/IA",
        "description": "Développer la hero section avec layout pour le slider Dev ↔ IA (sans animation interactive d'abord)",
        "details": "Créer composant HeroSection avec deux côtés : gauche (Mathieu développeur) et droite (Mathieu IA). Layout responsive avec images optimisées Next.js Image. Structure pour le futur slider interactif. Typography accrocheuse avec gradient text. CTA buttons vers contact et projets. Optimisation Core Web Vitals avec lazy loading approprié.",
        "testStrategy": "Valider le responsive design sur toutes tailles d'écran et mesurer les performances avec Lighthouse (objectif LCP <2.5s)",
        "priority": "high",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Développement des sections contenu statique",
        "description": "Créer les sections À propos, Expériences, Compétences avec contenu structuré",
        "details": "Section À propos : parcours, passion dev + pédagogie avec photo et texte engageant. Section Expériences : TechPath, Matha.io, formations avec timeline interactive. Section Compétences : focus Dev + IA, technologies avec skill bars ou grille moderne. Utiliser Shadcn/ui components pour cohérence. Animations d'entrée subtiles avec React Spring.",
        "testStrategy": "Vérifier la lisibilité du contenu, la cohérence du design et les animations d'entrée lors du scroll sur mobile et desktop",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Intégration système de contact avec Resend API",
        "description": "Implémenter le formulaire de contact professionnel avec Resend et validation",
        "details": "Créer formulaire de contact avec validation côté client (React Hook Form + Zod). Intégrer Resend API pour envoi emails professionnels avec templates HTML. Route API Next.js pour traitement sécurisé. Gestion d'erreurs et états loading. Protection anti-spam basique. Templates email pour Mathieu et confirmation utilisateur.",
        "testStrategy": "Tester l'envoi d'emails via Resend, validation des champs obligatoires, gestion des erreurs réseau et expérience utilisateur complète",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Configuration et intégration Claude API",
        "description": "Mettre en place l'intégration Claude API avec Haiku 3.5 et Sonnet 4, gestion des coûts",
        "details": "Configuration Claude API avec clés sécurisées dans variables d'environnement. Implémentation logique de routing : Haiku 3.5 pour requêtes standard, Sonnet 4 pour requêtes complexes. Middleware de gestion des coûts avec compteurs et limites. Route API Next.js pour proxy sécurisé. Gestion des erreurs et fallbacks. Structure prompt engineering pour personnalité Mathieu.",
        "testStrategy": "Tester les appels API, la bascule entre modèles selon la complexité, le respect des limites de coût et la gestion des erreurs",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Développement de l'interface chatbot avec streaming",
        "description": "Créer l'interface chat interactive avec streaming responses et Web Workers",
        "details": "Composant Chat avec interface moderne et accessible. Implémentation streaming responses avec ReadableStream. Web Workers pour traitement non-bloquant. État de conversation persistant dans sessionStorage. Animations de typing et transitions fluides. Support markdown dans réponses. Gestion offline avec messages d'erreur appropriés.",
        "testStrategy": "Tester l'interface chat, le streaming des réponses, la performance sur mobile, la persistance de session et le comportement offline",
        "priority": "high",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Implémentation du slider interactif Dev ↔ IA dans la hero section",
        "description": "Ajouter l'animation interactive du slider Dev/IA avec React Spring",
        "details": "Transformer la hero section statique en slider interactif avec React Spring. Animation fluide entre état Dev et état IA avec morphing des images et textes. Contrôles tactiles (swipe mobile) et clavier. Auto-play optionnel avec pause au hover. Optimisation performance pour 60fps sur mobile. Indicateurs visuels de l'état actuel.",
        "testStrategy": "Tester la fluidité des animations sur différents devices, les interactions tactiles, la performance 60fps et l'accessibilité",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Optimisations performance et Core Web Vitals",
        "description": "Optimiser les performances globales, bundle size et métriques Core Web Vitals",
        "details": "Analyse bundle avec Next.js Bundle Analyzer, tree-shaking optimal. Optimisation images avec Next.js Image et formats modernes (WebP/AVIF). Lazy loading composants non-critiques. Préchargement stratégique des ressources. Cache strategy avec Vercel KV pour réponses IA. Monitoring Core Web Vitals en continu. Target : bundle <200KB, Lighthouse >90.",
        "testStrategy": "Mesurer avec Lighthouse CI, tester sur connexions lentes (3G), valider Core Web Vitals et taille de bundle final",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-02T21:25:36.452Z",
      "updated": "2025-08-03T09:17:37.888Z",
      "description": "Tasks for master context"
    }
  }
}